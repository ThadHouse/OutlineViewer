plugins {
    id 'maven-publish'
    id 'jacoco'
    id 'java'
    id 'checkstyle'
    id 'application'
    id 'pmd'
    id "edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin" version "4.0.2"
    id "edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin" version "2020.2"
    id "com.jfrog.artifactory" version "4.15.1"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "com.diffplug.gradle.spotless" version "3.28.0"
    id "com.github.spotbugs" version "4.0.4"
    id 'edu.wpi.first.WpilibTools' version '0.1.0'
}

if (project.hasProperty('buildServer')) {
    wpilibVersioning.buildServerMode = true
}

if (project.hasProperty('releaseMode')) {
    wpilibVersioning.releaseMode = true
}

allprojects {
    repositories {
        mavenCentral()
    }
    if (project.hasProperty('releaseMode')) {
        wpilibRepositories.addAllReleaseRepositories(it)
    } else {
        wpilibRepositories.addAllDevelopmentRepositories(it)
    }
}

wpilibVersioning.version.finalizeValue()
version = wpilibVersioning.version.get()

println version
println project.version

if (System.getenv()['RUN_AZURE_ARTIFACTORY_RELEASE'] != null) {
  artifactory {
    contextUrl = 'https://frcmaven.wpi.edu/artifactory' // base artifactory url
    publish {
      repository {
        if (project.hasProperty('releaseMode')) {
          repoKey = 'release'
        } else {
          repoKey = 'development'
        }
        username = System.getenv()['ARTIFACTORY_PUBLISH_USERNAME']
        password = System.getenv()['ARTIFACTORY_PUBLISH_PASSWORD']
        maven = true
      }
      defaults {
          publications ('maven')
      }
    }
    clientConfig.info.setBuildName('OutlineViewer')
  }
  publish.dependsOn artifactoryPublish
}

def theMainClassName = "edu.wpi.first.outlineviewer.Main"

tasks.withType(Jar).configureEach {
    manifest {
        attributes["Implementation-Version"] = project.version
        attributes["Built-Date"] = Instant.now().toString()
    }
}

application {
    mainClassName = theMainClassName
}

// Spotless is used to lint and reformat source files.
spotless {
    kotlinGradle {
        ktlint("0.36.0")
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    format("extraneous") {
        target("src/**/*.fxml", "src/**/*.css", "*.xml", "*.yml", "*.md")
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
}

wpilibTools.createNativeConfigurations()

wpilibTools.addNativeResourcesToSourceSet(sourceSets.main)


wpilibTools.deps.javafx(dependencies, "base")
wpilibTools.deps.javafx(dependencies, "controls")
wpilibTools.deps.javafx(dependencies, "fxml")
wpilibTools.deps.javafx(dependencies, "graphics")

wpilibTools.deps.wpilibVersion = "2020.+"

wpilibTools.deps.wpilib(dependencies, "ntcore")
wpilibTools.deps.wpilib(dependencies, "wpiutil")

dependencies {
    implementation wpilibTools.deps.wpilibJava("ntcore")
    implementation wpilibTools.deps.wpilibJava("wpiutil")

    implementation "com.fasterxml.jackson.core:jackson-annotations:2.10.0"
    implementation "com.fasterxml.jackson.core:jackson-core:2.10.0"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.10.0"

    implementation group: "com.google.guava", name: "guava", version: "28.2-jre"
    implementation group: "org.controlsfx", name: "controlsfx", version: "11.0.0"
}

checkstyle {
    toolVersion = "8.30"
}

// pmd {
//     toolVersion = "6.22.0"
//     consoleOutput = true
//     sourceSets = setOf(project.sourceSets["main"], project.sourceSets["test"])
//     reportsDir = file("${project.buildDir}/reports/pmd")
//     ruleSetFiles = files(file("$rootDir/pmd-ruleset.xml"))
//     ruleSets = emptyList()
// }

tasks.withType(JavaCompile).configureEach {
    // UTF-8 characters are used in menus
    options.encoding = "UTF-8"
}

publishing {
    publications {
        create(MavenPublication) {
            groupId = "edu.wpi.first.wpilib"
            artifactId = "OutlineViewer"
            version = project.version as String
            artifact(shadowJar) {
                classifier null
            }
        }
    }
}


wrapper {
    gradleVersion = '6.0.1'
}
